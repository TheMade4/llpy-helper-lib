from typing import Any, Callable, Literal, overload

from ..types import (
    T_WSClientStatus,
    T_WSClientStatusClosed,
    T_WSClientStatusClosing,
    T_WSClientStatusOpen,
)


class WSClient:
    """WebSocket client object API"""

    Open: T_WSClientStatusOpen
    """Connection status enumeration | Currently in a normal connection"""
    Closing: T_WSClientStatusClosing
    """Connection status enumeration | Disconnecting"""
    Closed: T_WSClientStatusClosed
    """Connection status enumeration | Not connected"""

    def __init__(self) -> None:
        """Create a new WebSocket client object"""

    @property
    def status(self) -> T_WSClientStatus:
        """Current connection status (`WSClient.Open` / `WSClient.Closing` / `WSClient.Closed`)"""

    def connect(self, target: str) -> bool:
        """
        Establish a connection

        Args:
            target: Target address to connect to, in the form of `ws://hostname[:port][/path/path][?query=value]`

        Returns:
            Whether the connection was successful
        """

    def connectAsync(self, target: str, callback: Callable[[bool], Any]) -> bool:
        """
        Asynchronously establish a connection

        Callback Args:
            success (bool): Whether the WebSocket connection was successful

        Args:
            target: Target address to connect to, in the form of `ws://hostname[:port][/path/path][?query=value]`
            callback: Callback function to execute when the connection succeeds or fails

        Returns:
            Whether the connection attempt was successful
        """

    def send(self, msg: str | bytearray) -> bool:
        """
        Send text/binary messages

        If the parameter type is `str`, it will be sent as text; if it is `bytearray`, it will be sent as binary data

        Args:
            msg: Text/binary data to be sent

        Returns:
            Whether the sending was successful
        """

    @overload
    def listen(
            self,
            event: Literal["onTextReceived"],
            callback: Callable[[str], Any],
    ) -> bool:
        """
        Listen for WebSocket events

        Listen for text message reception

        Callback Args:
            msg (str): Received text message

        Args:
            event: Event name to listen for
            callback: Registered callback function

        Returns:
            Whether the event listening was successful
        """

    @overload
    def listen(
            self,
            event: Literal["onBinaryReceived"],
            callback: Callable[[bytearray], Any],
    ) -> bool:
        """
        Listen for WebSocket events

        Listen for binary message reception

        Callback Args:
            data (bytearray): Received binary message

        Args:
            event: Event name to listen for
            callback: Registered callback function

        Returns:
            Whether the event listening was successful
        """

    @overload
    def listen(self, event: Literal["onError"], callback: Callable[[str], Any]) -> bool:
        """
        Listen for WebSocket events

        Listen for error occurrence

        Callback Args:
            msg (str): Error message

        Args:
            event: Event name to listen for
            callback: Registered callback function

        Returns:
            Whether the event listening was successful
        """

    @overload
    def listen(
            self,
            event: Literal["onLostConnection"],
            callback: Callable[[int], Any],
    ) -> bool:
        """
        Listen for WebSocket events

        Listen for connection loss

        Callback Args:
            code (int): Error code

        Args:
            event: Event name to listen for
            callback: Registered callback function

        Returns:
            Whether the event listening was successful
        """

    def close(self) -> bool:
        """
        Close the connection

        Do not continue using this client object when it is in the closed state!

        Returns:
            Whether the connection was successfully closed
        """

    def shutdown(self) -> bool:
        """
        Forcefully disconnect the connection

        Do not continue using this client object when it is in the closed state!

        Returns:
            Whether the connection was successfully disconnected
        """

    def errorCode(self) -> int:
        """
        Get the error code

        If a failure occurs in the above interfaces, you can retrieve the last error code from here

        Returns:
            The error code generated by the last error
        ```
